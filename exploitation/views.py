import datetime
import logging
import requests
import re

from django.contrib.auth.decorators import login_required, permission_required
from django.core.paginator import Paginator, PageNotAnInteger, EmptyPage
from django.db.models import Q
from django.shortcuts import render, redirect
from django.urls import reverse_lazy
from django.views.decorators.csrf import csrf_protect
from excel_response import ExcelResponse
from slugify import slugify

from accounts.models import Profile
from accounts.smsc_api import SMSC
from accounts.views import get_cur_scompany, get_scompany
from dashboard.views import logging_event
from exploitation.apps import ExploitationAppConfig
from exploitation.forms import getadd_eproposal_form, engineer_eproposal_form
from exploitation.models import eproposals, eproposals_filter
from reference_books.models import Status, TypeRequest, TypeDocument, CoWorker, Event

logger = logging.getLogger(__name__)

events = Event.objects.all()

app = ExploitationAppConfig.name


# СМС-уведомление инженера о появлении новой заявки
def sms_notification_engineer(proposal_id):
    chat_id = None
    proposal = eproposals.objects.filter(id=proposal_id,
                                         Status=Status.objects.get(slug='open'),
                                         DateTime_schedule=datetime.datetime.today()).last()
    if proposal:
        coworks = proposal.CoWorkers.all()
        for cowork in coworks:
            if cowork.Username:
                profile = Profile.objects.get(user=cowork.Username)
                last_name = profile.user.last_name

                # Отправим также в канал Телеграма
                for item in get_scompany(cowork.Username):
                    if item.slug == 'amulet_orsk':
                        chat_id = -1001163752774
                    elif item.slug == 'amulet_oren':
                        chat_id = -1001184360862
                    else:
                        pass
                if chat_id:
                    url = "https://api.telegram.org/bot1730861248:AAH4B5r3YKhzONijjLKEyy8zIJleuO3Nk7s"
                    text = 'Для %s появилась задача: №%d. (Наименование: %s. Описание: %s. Срок: до 18:00 %s)' % (
                    proposal.CoWorkers, proposal.id, proposal.title, proposal.FaultAppearance, proposal.DateTime_schedule.__str__())
                    params = {'chat_id': chat_id, 'text': text}
                    requests.post(url + '/sendMessage', data=params)

                # Если вписан номер, отправим СМС (позже отключить)
                if profile.phone:
                    smsc = SMSC()
                    text = "АРМ 'Заявки'.На Вас %s назначена новая заявка №%s." % (last_name, proposal_id)
                    r = smsc.send_sms('7%s' % profile.phone, text, sender="arm_zayavki")
                    if len(r) == 4:
                        logger.debug(u'Исполнитель %s +7%s уведомлён о получении новой заявки по смс' % (
                        profile.user.username, profile.phone))
                    else:
                        error = r[2]
                        logger.debug(u'Система не смогла уведомить исполнителя %s +7%s по смс. Ошибка: %s' % profile.user.username, profile.phone, error)


@login_required
@permission_required('exploitation.custom_view', login_url=reverse_lazy('page_error403'))
def get_eproposals(request, status):
    proposals = eproposals.objects.filter(ServiceCompany=get_cur_scompany(request.user))
    if status == 'open':
        qs = proposals.filter(
            Status__in=Status.objects.filter(slug__in=['open', 'complete']),
            DateTime_schedule__lte=datetime.datetime.today())
    elif status == 'scheduled':
        qs = proposals.filter(
            Status__in=Status.objects.filter(slug__in=['open', 'complete']),
            DateTime_schedule__gt=datetime.datetime.today())
    else:
        qs = proposals.filter(
            Status=Status.objects.get(slug=status),
            DateTime_schedule__year=datetime.datetime.today().year)

    qs = qs.distinct('id').order_by('-id')
    proposals_filter = eproposals_filter(request.GET, queryset=qs)
    paginator = Paginator(proposals_filter.qs, 50)
    page = request.GET.get('page')
    try:
        proposals = paginator.page(page)
    except PageNotAnInteger:
        proposals = paginator.page(1)
    except EmptyPage:
        proposals = paginator.page(paginator.num_pages)
    proposals_filter = eproposals_filter(request.GET, queryset=qs)

    return render(request, 'eproposals_list.html', {
        'title': 'Заявки на эксплуатацию',
        'status': status,
        'proposals': proposals,
        'page': page,
        'proposals_filter': proposals_filter,
    })


@login_required
@permission_required('exploitation.custom_view', login_url=reverse_lazy('page_error403'))
@csrf_protect
def addget_eproposals(request, proposal_id=None):
    olddata = request_data = []
    cw_string = numobject = ''
    if proposal_id:
        request_data = eproposals.objects.get(id=proposal_id)

    form = getadd_eproposal_form(request.POST or None, user=request.user,
                                 instance=proposal_id and eproposals.objects.get(id=proposal_id))

    if request.POST:
        if form.is_valid():
            new_request = form.save(commit=False)

            # if form.cleaned_data['numobject'] != '':
            #    numobject = re.sub(r'[.]', '', form.cleaned_data['numobject'])
            if proposal_id is None:
                new_request.ServiceCompany = get_cur_scompany(request.user)
                new_request.TypeRequest = TypeRequest.objects.get(slug='exploitation')
                new_request.TypeDocument = TypeDocument.objects.get(slug='request')
                # new_request.NumObject = numobject
            else:
                olddata = eproposals.objects.get(id=proposal_id)
                new_request.ServiceCompany = olddata.ServiceCompany
                new_request.AddressObject = olddata.AddressObject
                new_request.NumObject = olddata.NumObject
                new_request.FaultAppearance = olddata.FaultAppearance
                # new_request.NumObject = numobject
            new_request.save()
            form.save_m2m()

            if proposal_id is None:
                try:
                    logging_event(app, 'request', new_request.pk, events.get(slug='Request_add'), old_value='')
                except:
                    logger.error(u'|%s|: Ошибка добавления заявки на эксплуатацию' % request.user.username)
            else:
                try:
                    if new_request.Client_words != olddata.Client_words:
                        logging_event(app, 'request', new_request.pk, events.get(slug='Client_change'),
                                      old_value=olddata.Client_words)
                    if new_request.DateTime_schedule != olddata.DateTime_schedule:
                        logging_event(app, 'request', new_request.pk, events.get(slug='DateSchedule_change'),
                                      old_value=olddata.DateTime_schedule.__str__())
                    if new_request.DateTime_work != olddata.DateTime_work:
                        logging_event(app, 'request', new_request.pk, events.get(slug='DateWork_change'),
                                      old_value=olddata.DateTime_work.__str__())
                    if new_request.CoWorkers != olddata.CoWorkers:
                        for cw_item in olddata.CoWorkers.objects.all():
                            if cw_string == '':
                                cw_string = cw_item
                            else:
                                cw_string = cw_string + ', ' + cw_item
                        logging_event(app, 'request', new_request.pk, events.get(slug='CoWorkers_change'),
                                      old_value=olddata.cw_string)
                    if new_request.Status != olddata.Status:
                        logging_event(app, 'request', new_request.pk, events.get(slug='Status_change'),
                                      old_value=olddata.Status.Name)
                except:
                    logger.error(u'|%s|: Ошибка обновления заявки на эксплуатацию' % request.user.username)

            return redirect('close_tab')

    return render(request, 'eproposals_item.html', {
        'form': form,
        'request_data': request_data,
        'perms': request.user.get_all_permissions("exploitation"),
    })


@login_required
@permission_required('exploitation.custom_view', login_url=reverse_lazy('page_error403'))
def get_eproposals_engineer(request):
    cowork = CoWorker.objects.filter(Username=request.user)
    request_list = []
    today_request = today_close = 0
    if cowork:
        request_list = eproposals.objects.\
            filter((Q(Status=Status.objects.get(slug='open')) |
                    Q(Status=Status.objects.get(slug='transfer')) |
                    Q(Status=Status.objects.get(slug='control'))), CoWorkers__in=cowork.all(),
                   DateTime_schedule=datetime.datetime.today()).order_by('-id')
        if request_list.count() == 0:
            today_request = request_list.count()
            today_close = eproposals.objects.filter(
                (Q(Status=Status.objects.get(slug='complete')) | Q(Status=Status.objects.get(slug='close'))),
                CoWorkers=cowork.first()).count()
    else:
        return redirect('page_error423')

    return render(request, 'mobile_request_list.html',
                  {'requests': request_list, 'today_request': today_request, 'today_close': today_close})


@login_required
@permission_required('exploitation.custom_view', login_url=reverse_lazy('page_error403'))
@csrf_protect
def change_eproposals_engineer(request, proposal_id=None):
    history_object = []
    form = engineer_eproposal_form(request.POST or None,
                                   instance=proposal_id and eproposals.objects.get(id=proposal_id))

    if request.POST:
        if form.is_valid():
            try:
                eproposals.objects.\
                    filter(id=proposal_id).update(DateTime_work=form.cleaned_data['DateTime_work'],
                                                  DescriptionWorks=form.cleaned_data['DescriptionWorks'],
                                                  Status=Status.objects.get(slug='complete'))
                if form.cleaned_data['Written_act'] == 'on':
                    eproposals.objects.filter(id=proposal_id).update(Written_act=True)

                logger.debug(u'|%s|: Заявка №%d обновлена' % (request.user.username, int(proposal_id)))
            except:
                logger.exception(u'|%s|: Обновить заявку №%d не удалось' % (request.user.username, int(proposal_id)))

        return redirect('exploitation:get_eproposals_engineer')
    else:
        request_data = eproposals.objects.get(id=proposal_id)
        list_obj = re.sub(r'\s', '', request_data.NumObject)
        list_obj = re.split(r'[;,\s]', list_obj)
        regex_str = r'(\s|^)%s' % list_obj[0]
        find_digit = re.findall(r'[0123456789]\w+', regex_str)

        if list_obj != '' and len(find_digit) > 0:
            history_object = eproposals.objects.filter(NumObject__iregex=regex_str,
                                                       DateTime_work__lte=datetime.datetime.today(),
                                                       ServiceCompany=request_data.ServiceCompany).\
            values('id', 'NumObject', 'DateTime_work', 'DescriptionWorks').order_by('-DateTime_work')

    return render(request, 'mobile_request_item.html', {
        'form': form,
        'history_object': history_object,
        'request_data': request_data,
    })


@login_required
def get_eacts(request):
    requests_notgetact = eproposals.objects.filter(ServiceCompany=get_cur_scompany(request.user),
                                                   Required_act=True, Date_act__isnull=True).order_by('-id')
    return render(request, 'act_required.html', {'proposals': requests_notgetact})


def export_toexcel_eproposals(request, coworker_id, start_date, end_date):
    start = datetime.datetime.strptime(start_date, "%d%m%Y")
    end = datetime.datetime.strptime(end_date, "%d%m%Y")
    coworker = CoWorker.objects.get(id=int(coworker_id))
    list_exploitation = eproposals.objects. \
        values('id', 'DateTime_work', 'AddressObject', 'Client_words', 'FaultAppearance', 'DescriptionWorks', ). \
        filter(CoWorkers=coworker, DateTime_work__range=(start, end), Status=Status.objects.filter(slug='close')). \
        order_by('DateTime_work')

    lst = []
    title = ['Номер', 'Выполнено', 'Адрес', 'Объект', 'Неисправность', 'Описание работ']

    lst.append(title)
    for item in list_exploitation:
        date_work = item['DateTime_work']
        line = [str(item['id']), date_work.strftime('%d.%m.%Y'), item['AddressObject'], item['Client_words'],
                item['FaultAppearance'], item['DescriptionWorks']]
        lst.append(line)

    filename = 'arm-zayavki_export_%s_%s/%s' % (slugify(coworker.Username.username, max_length=20,
                                                        word_boundary=True, separator="_"),
                                                start.date().__str__(), end.date().__str__())
    return ExcelResponse(lst, output_filename=filename, worksheet_name='exploitation')
