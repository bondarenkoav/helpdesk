__author__ = 'ipman'

import datetime
from accounts.views import get_scompany, get_cur_scompany
from django.contrib.admin.widgets import AdminDateWidget
from django import forms
from django.forms import ModelForm
from exploitation.models import eproposals
from reference_books.models import CoWorker, Client, Status


class getadd_eproposal_form(ModelForm):

    def __init__(self, *args, **kwargs):
        self.user = kwargs.pop('user', None)
        super(getadd_eproposal_form, self).__init__(*args, **kwargs)
        Company = get_scompany(self.user)
        Company_cur = get_cur_scompany(self.user)
        instance = getattr(self, 'instance', None)

        if instance and instance.id:
            self.fields['NumObject'].required = False
            self.fields['NumObject'].widget.attrs['disabled'] = 'disabled'
            self.fields['AddressObject'].required = False
            self.fields['AddressObject'].widget.attrs['disabled'] = 'disabled'
            self.fields['FaultAppearance'].required = False
            self.fields['FaultAppearance'].widget.attrs['disabled'] = 'disabled'

            if instance.Required_act is False:
                self.fields['Date_act'].required = False
                self.fields['Date_act'].widget.attrs['disabled'] = 'disabled'

            self.fields['Status'].required = True
            if instance.TypeDocument.slug == 'return_eq':
                if bool(self.user.groups.filter(name='storekeepers')):
                    self.fields['Status'].queryset = Status.objects.filter(returneq_form=True, slug__in=['close'])
                else:
                    self.fields['Status'].queryset = Status.objects.filter(returneq_form=True, slug__in=['open', 'complete', 'canceled'])
        else:
            self.fields['Client_choices'].required = False
            self.fields['Client_choices'].widget.attrs['disabled'] = 'disabled'
            self.fields['Status'].initial = Status.objects.get(slug='open')

        self.fields['ServiceCompany'].queryset = Company
        self.fields['ServiceCompany'].initial = Company_cur.id
        self.fields['ServiceCompany'].required = False
        self.fields['ServiceCompany'].widget.attrs['disabled'] = 'disabled'

        self.fields['CoWorkers'].queryset = CoWorker.objects.filter(ServiceCompany=Company_cur,
                                                                    StatusWorking=True).distinct()
        self.fields['CoWorkers'].widget.attrs['size'] = 7

    Client_choices = forms.ModelChoiceField(required=False, label=u'Контрагент', queryset=Client.objects.all(),
                                            widget=forms.Select(attrs={'class': 'chosen-select',
                                                                       'placeholder': 'Поиск контрагента',
                                                                       'style': 'height:38px', 'tabindex': '2'}))
    DateTime_schedule = forms.DateField(required=False, label='Запланировано на', initial=datetime.date.today,
                                        widget=forms.DateInput(format='%Y-%m-%d', attrs={'type': 'date'}),
                                        input_formats=('%Y-%m-%d',))
    DateTime_work = forms.DateField(required=False, label='Дата выполнения',
                                    widget=forms.DateInput(format='%Y-%m-%d', attrs={'type': 'date'}),
                                    input_formats=('%Y-%m-%d',))
    Date_act = forms.DateField(required=False, label='Дата',
                               widget=forms.DateInput(format='%Y-%m-%d', attrs={'type': 'date'}),
                               input_formats=('%Y-%m-%d',))
    FaultAppearance = forms.CharField(required=False, label='Неисправность',
                                      widget=forms.widgets.Textarea(attrs={'rows': 2}))
    DescriptionWorks = forms.CharField(required=False, label='Описание выполненных работ',
                                       widget=forms.widgets.Textarea(attrs={'rows': 2}))
    Status = forms.ModelChoiceField(required=False, label='Состояние',
                                    queryset=Status.objects.filter(view_form=True), widget=forms.Select())
    CoWorkers = forms.ModelMultipleChoiceField(required=False, label='Исполнители',
                                               widget=forms.SelectMultiple(attrs={'class': 'multiselect'}),
                                               queryset=CoWorker.objects.all())

    class Meta:
        model = eproposals
        fields = ['ServiceCompany', 'NumObject', 'model_transmitter', 'num_transmitter', 'AddressObject',
                  'Client_words',
                  'FaultAppearance', 'DateTime_schedule', 'DescriptionWorks', 'DateTime_work', 'CoWorkers',
                  'Client_choices',
                  'Status', 'Required_act', 'Date_act']


class engineer_eproposal_form(ModelForm):

    def __init__(self, *args, **kwargs):
        super(engineer_eproposal_form, self).__init__(*args, **kwargs)

        self.fields['ServiceCompany'].required = False
        self.fields['ServiceCompany'].widget.attrs['disabled'] = 'disabled'
        self.fields['NumObject'].required = False
        self.fields['NumObject'].widget.attrs['disabled'] = 'disabled'
        self.fields['AddressObject'].required = False
        self.fields['AddressObject'].widget.attrs['disabled'] = 'disabled'
        self.fields['Client_words'].required = False
        self.fields['Client_words'].widget.attrs['disabled'] = 'disabled'
        self.fields['FaultAppearance'].widget.attrs['rows'] = 4
        self.fields['FaultAppearance'].required = False
        self.fields['FaultAppearance'].widget.attrs['disabled'] = 'disabled'
        self.fields['DateTime_schedule'].required = False
        self.fields['DateTime_schedule'].widget.attrs['disabled'] = 'disabled'
        self.fields['DescriptionWorks'].widget.attrs['rows'] = 4
        self.fields['Status'].queryset = Status.objects.filter(slug__in=['open', 'complete', 'not_fulfilled'])

    DateTime_work = forms.DateField(required=False, label='Дата выполнения',
                                    widget=forms.DateInput(format='%Y-%m-%d', attrs={'type': 'date'}),
                                    input_formats=('%Y-%m-%d',))

    class Meta:
        model = eproposals
        fields = ['CoWorkers', 'ServiceCompany', 'NumObject', 'AddressObject', 'Client_words', 'FaultAppearance',
                  'DateTime_schedule', 'DateTime_work', 'DescriptionWorks', 'Written_act', 'Status']

    def clean(self):
        cleaned_data = super(engineer_eproposal_form, self).clean()
        status = cleaned_data.get('Status')
        date_work = cleaned_data['DateTime_work']

        if not self.errors:
            if status != 'Принята' and date_work is None:
                raise forms.ValidationError(u'Введите дату выполнения задачи')

        return cleaned_data


class request_actrequired_fordate(forms.Form):
    request_date = forms.DateField(required=False, label='Дата',
                                   initial=datetime.datetime.today() - datetime.timedelta(days=1),
                                   widget=AdminDateWidget)
